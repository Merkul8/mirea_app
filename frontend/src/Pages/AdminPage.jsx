import {useEffect, useState} from "react";
import {backendUrls} from "../Utils/urls";
import "../Components/Auth/Account/Account.css";
import {useNavigate} from "react-router-dom";

export default function AdminPage() {
    const [adminData, setAdminData] = useState(null);
    const [usersToActivate, setUsersToActivate] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const navigate = useNavigate();

    useEffect(() => {
        const fetchData = async () => {
            try {
                const adminRes = await fetch(backendUrls.me, {
                    credentials: 'include',
                });
                if (!adminRes.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                const adminJson = await adminRes.json();
                setAdminData(adminJson);

                const usersRes = await fetch(backendUrls.usersToActivate, {
                    credentials: 'include',
                });
                if (!usersRes.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
                const usersJson = await usersRes.json();
                setUsersToActivate(usersJson.users || []);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    const activateUser = async (userId) => {
        try {
            const response = await fetch(backendUrls.activateUser(userId), {
                method: "PATCH",
                credentials: "include",
            });
            if (!response.ok) throw new Error();
            setUsersToActivate(prev => prev.filter(user => user.id !== userId));
        } catch (err) {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    };

    const handleLogout = async () => {
        try {
            await fetch(backendUrls.logout, {
                method: "POST",
                credentials: "include",
            });
            navigate("/login");
        } catch (err) {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
        }
    };

    if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    if (error) return <div className="error">{error}</div>;

    return (
        <div className="account-page-container">
            <h2 className="account-title">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>

            <div className="buttons-grid">
                <button onClick={handleLogout} className="logout-button">
                    üö™ –í—ã–π—Ç–∏
                </button>
            </div>

            <div className="card">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
                <div className="info-grid">
                    <div className="info-item">
                        <span className="info-label">–§–ò–û:</span>
                        <span className="info-value">
                            {adminData.last_name} {adminData.name} {adminData.patronymic}
                        </span>
                    </div>
                    <div className="info-item">
                        <span className="info-label">Email:</span>
                        <span className="info-value">{adminData.email}</span>
                    </div>
                </div>
            </div>

            <div className="card">
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é</h3>
                {usersToActivate.length === 0 ? (
                    <p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.</p>
                ) : (
                    <table className="users-table">
                        <thead>
                        <tr>
                            <th>–§–ò–û</th>
                            <th>Email</th>
                            <th>–ö–∞—Ñ–µ–¥—Ä–∞</th>
                            <th>–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
                            <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                        </tr>
                        </thead>
                        <tbody>
                        {usersToActivate.map(user => (
                            <tr key={user.id}>
                                <td>{user.last_name} {user.first_name} {user.patronymic}</td>
                                <td>{user.email}</td>
                                <td>{user.departament?.title || "‚Äî"}</td>
                                <td>{user.post}</td>
                                <td>
                                    <button
                                        className="small-activate-btn"
                                        onClick={() => activateUser(user.id)}
                                    >
                                        ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                )}
            </div>
        </div>
    );
}
